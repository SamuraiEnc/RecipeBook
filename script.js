const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const iconv = require('iconv-lite'); // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const BASE_URL = 'https://www.povarenok.ru/recipes/dishes/first/';
const OUTPUT_FILE = 'recipes_full.json';
const MAX_RECIPES = 200; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
const DELAY_BETWEEN_REQUESTS = 100; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

// –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

async function parseRecipes() {
  try {
    console.log('‚åõ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã
    const recipeLinks = await getAllRecipeLinks();
    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${recipeLinks.length}`);

    // 2. –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–¥—Ä–æ–±–Ω–æ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º MAX_RECIPES)
    const recipes = [];
    for (let i = 0; i < Math.min(recipeLinks.length, MAX_RECIPES); i++) {
      const recipeUrl = recipeLinks[i];
      console.log(`‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—Ü–µ–ø—Ç–∞ ${i+1}/${Math.min(recipeLinks.length, MAX_RECIPES)}: ${recipeUrl}`);
      
      const recipeDetails = await parseSingleRecipe(recipeUrl);
      if (recipeDetails) {
        recipes.push(recipeDetails);
      }
      
      await delay(DELAY_BETWEEN_REQUESTS);
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fs.writeFileSync(OUTPUT_FILE, JSON.stringify(recipes, null, 2));
    console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –°–ø–∞—Ä—Å–µ–Ω–æ ${recipes.length} —Ä–µ—Ü–µ–ø—Ç–æ–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ${OUTPUT_FILE}`);
    
    return recipes;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã
async function getAllRecipeLinks() {
  const response = await axios.get(`${BASE_URL}/recipes/`, {
    headers: {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    },
    responseType: 'arraybuffer'
  });
  
  const data = iconv.decode(response.data, 'win1251');
  const $ = cheerio.load(data);

  const links = [];
  $('.cat-list a').each((i, element) => {
    const href = $(element).attr('href');
    if (href) {
      links.push(href.startsWith('http') ? href : `${BASE_URL}${href}`);
    }
  });

  return [...new Set(links)]; // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
async function parseSingleRecipe(url) {
  try {
    const response = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      },
      responseType: 'arraybuffer'
    });
    
    const data = iconv.decode(response.data, 'win1251');

    const $ = cheerio.load(data);

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const title = $('h1').first().text().trim();
    const category = $('.article-breadcrumbs p span a').first().text().trim();
    const link = $('.item-bl h2 a').first().attr('href');
    
    // –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    const ingredients = [];
    $('.tab-content').first().each((i, element) => {
      const name = $(element).find('.tab-content p').text().trim();
      if (name) ingredients.push({ name });
    });
    
    return {
      url,
      title,
      category,
      link,
      ingredients,
    };
    
  } catch (error) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${url}:`, error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
parseRecipes();